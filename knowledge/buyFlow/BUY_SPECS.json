{
    "version": "0.31",
    "project": { "name": "WFounders / WFOUNDER Purchase Flow", "owner": "Stephane" },
    "context": {
      "repo": "NetworkF (single-repo, Vercel + Supabase Functions)",
      "runtime": { "frontend": "Vite/React", "backend": "Supabase Edge Functions (Deno)" },
      "deploy_envs": ["DEV", "PROD"],
      "current_state": "Login + Web3Auth wallet OK; no on-chain actions"
    },
    "ask": {
      "goal": "Buy WFOUNDER with ETH/POL/USDC/USDT or FIAT with minimal friction (Polygon only v1)",
      "gas": "Users pay gas in WFOUNDER via token paymaster; no native POL needed"
    },
    "target_architecture": {
      "choice": "Supabase backend-of-record; keep front/back in same repo",
      "components": [
        "Buy Modal (src/components/wallet/BuyWfounderModal.tsx)",
        "Onramp Widget (src/components/wallet/OnrampWidget.tsx)",
        "Quote Service (supabase/functions/quote)",
        "Execute Service (supabase/functions/execute)",
        "Status Service (supabase/functions/status)",
        "Onramp Webhook (supabase/functions/onramp-webhook)",
        "Paymaster integration (via execute function)",
        "Sanity pricing check vs WETH/WFOUNDER reference pool"
      ],
      "repo_layout": {
        "frontend": {
          "components": [
            "src/components/wallet/BuyWfounderModal.tsx",
            "src/components/wallet/OnrampWidget.tsx",
            "src/components/wallet/GaslessBadge.tsx",
            "src/components/ui/QuoteBreakdown.tsx"
          ],
          "hooks": [
            "src/hooks/useBuyWfounder.ts",
            "src/hooks/useQuote.ts",
            "src/hooks/useOnrampEvents.ts"
          ],
          "services": [
            "src/services/swapService.ts",
            "src/services/paymasterService.ts",
            "src/services/onrampService.ts",
            "src/services/analytics.ts"
          ],
          "config": [
            "src/config/contracts.ts",
            "src/config/env.ts (extend flags + API base)",
            "src/config/networks.ts (ensure Polygon mainnet + Amoy)"
          ],
          "types": [
            "src/types/buy.ts",
            "src/types/tokens.ts"
          ]
        },
        "edge_functions": [
          "supabase/functions/quote",
          "supabase/functions/execute",
          "supabase/functions/status",
          "supabase/functions/onramp-webhook"
        ]
      }
    },
    "providers": {
      "onramp": { "primary": "Transak", "backup": "Ramp" },
      "swap": { "primary": "0x Swap API", "backup": "ParaSwap or LI.FI single-chain" },
      "gas": { "primary": "Biconomy Token Paymaster", "backup": "Gelato Paymaster" }
    },
    "liquidity_and_pricing": {
      "reference_pool": { "pair": "WETH/WFOUNDER", "chain": "Polygon", "dex": "TBD", "address": "REF_POOL_ADDRESS" },
      "policy": { "slippage_bps": 100, "max_price_impact_bps": 200, "quote_ttl_sec": 45 }
    },
    "env_required": {
      "PUBLIC": ["NEXT_PUBLIC_CHAIN_ID", "NEXT_PUBLIC_WFOUNDER_ADDRESS", "NEXT_PUBLIC_FEATURE_ENABLE_FIAT", "NEXT_PUBLIC_FEATURE_ENABLE_GAS_SPONSORSHIP"],
      "SERVER": ["ZEROX_API_KEY", "BICONOMY_API_KEY", "BICONOMY_PAYMASTER_ID", "ONRAMP_API_KEY", "ONRAMP_WEBHOOK_SECRET", "ALCHEMY_OR_RPC_URL_POLYGON", "REF_POOL_ADDRESS", "ALLOWED_ROUTERS"]
    },
    "project_status": {
      "method": "milestone_based_critical_path",
      "milestones": [
        {
          "id": "M1-foundation",
          "title": "Repo ready for buy flow",
          "status": "todo",
          "owner": "BE/FE",
          "subtasks": [
            "Add placeholder files per repo_layout (no code yet)",
            "Extend env.ts with feature flags + API base",
            "Supabase project secrets for provider keys (DEV/PROD)",
            "Decide DEV flow: call DEV Supabase directly (simplest) vs local serve"
          ],
          "acceptance": ["Frontend builds; functions deploy as no-op health checks"]
        },
        {
          "id": "M2-providers-accounts",
          "title": "Provider accounts + allowlists",
          "status": "todo",
          "subtasks": [
            "Transak (Polygon USDC/POL), 0x (Polygon), Biconomy Token Paymaster (WFOUNDER fee)",
            "Record official WFOUNDER, WETH, router, ref pool addresses in contracts.ts",
            "Set ALLOWED_ROUTERS and REF_POOL_ADDRESS in secrets"
          ],
          "dependencies": ["M1-foundation"],
          "acceptance": ["Keys/IDs live in Supabase secrets; WFOUNDER enabled for paymaster"]
        },
        {
          "id": "M3-reference-pool",
          "title": "Pricing guardrails",
          "status": "todo",
          "subtasks": [
            "Confirm WETH/WFOUNDER pool address + DEX",
            "Edge util to fetch spot/TWAP price",
            "Reject quotes deviating beyond policy"
          ],
          "dependencies": ["M2-providers-accounts"],
          "acceptance": ["Quote sanity checks pass unit tests"]
        },
        {
          "id": "M4-quote-endpoint",
          "title": "GET /api/quote",
          "status": "todo",
          "subtasks": [
            "Map pay assets (USDC, POL, ETH) → 0x params",
            "Return {route_id, amount_out_est, price, gas_in_wfounder_est, ttl}",
            "Apply slippage + impact + sanity checks; surface warnings"
          ],
          "dependencies": ["M3-reference-pool"],
          "acceptance": ["Polygon quotes for all supported pay assets"]
        },
        {
          "id": "M5-execute-endpoint",
          "title": "POST /api/execute (pay gas in WFOUNDER)",
          "status": "todo",
          "subtasks": [
            "Biconomy token paymaster integration",
            "Approvals via permit/permit2 when available; fallback approve",
            "Fail-fast when WFOUNDER_out < gas_in_wfounder_est + buffer",
            "Idempotency key; return tx_ids; implement /api/status polling"
          ],
          "dependencies": ["M4-quote-endpoint"],
          "acceptance": ["Swap executes w/out native POL; clear insufficient WFOUNDER error"]
        },
        {
          "id": "M6-frontend-modal",
          "title": "Buy modal UX",
          "status": "todo",
          "subtasks": [
            "Add CTA on HomePage → BuyWfounderModal",
            "Asset picker (USDC, POL, ETH, FIAT)",
            "Quote display with QuoteBreakdown + GaslessBadge",
            "Confirm + progress; analytics events"
          ],
          "dependencies": ["M4-quote-endpoint", "M5-execute-endpoint"],
          "acceptance": ["3-step flow functional on DEV"]
        },
        {
          "id": "M7-fiat-onramp",
          "title": "Onramp + autoswap",
          "status": "todo",
          "subtasks": [
            "Embed Transak widget (prefill wallet, chain=Polygon)",
            "HMAC webhook: detect success → server-initiated /api/execute to WFOUNDER",
            "Frontend listens to onramp events; shows status"
          ],
          "dependencies": ["M5-execute-endpoint", "M6-frontend-modal"],
          "acceptance": ["Fiat→USDC/POL→WFOUNDER auto path confirmed on DEV"]
        },
        {
          "id": "M8-observability",
          "title": "Logs & telemetry",
          "status": "todo",
          "subtasks": [
            "route_id correlation across quote/execute/status",
            "Counters: success_rate, median_time_to_complete",
            "Alerts on provider errors (0x, paymaster, onramp)"
          ],
          "dependencies": ["M6-frontend-modal", "M7-fiat-onramp"],
          "acceptance": ["Simple dashboard covering funnel events"]
        },
        {
          "id": "M9-staging-prod",
          "title": "Prod gating + launch",
          "status": "todo",
          "subtasks": [
            "Feature flags: enable_fiat / enable_gas_sponsorship = true for internal",
            "Scripted test purchases (USDC→WFOUNDER, POL→WFOUNDER, FIAT→WFOUNDER)",
            "Go-live: flip flags for all users"
          ],
          "dependencies": ["M8-observability"],
          "acceptance": ["Users complete purchases in ≤3 steps; metrics on target"]
        }
      ]
    }
  }